stages:
  - testing
  - formatting
  - deploy

.local_registry:
  before_script:
    # Install git.
    - apt-get update -qq && apt-get install -y git

    # Install ssh-agent and add the private key.
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$PRIVATE_KEY_ONESINTEF" | tr -d '\r' | ssh-add -

    # Set up the .ssh directory.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # Set the known_hosts to a variable containing the public key(s) of gitlab.sintef.no
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Test the ssh connection.
    - ssh -T git@gitlab.sintef.no

    # Add the ONESintef registry and the public General registry.
    - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "git@gitlab.sintef.no:julia-one-sintef/onesintef.git"))'
    - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "https://github.com/JuliaRegistries/General"))'


test_light:
  stage: testing
  image: julia:latest
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = false)"
  except:
    - main

test_full:
  stage: testing
  image: julia:latest
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
    - julia --project=coverage -e 'import Pkg; Pkg.instantiate()'
    - julia --project=coverage coverage/coverage-summary.jl
  coverage: '/\(\d+.\d+\%\) covered/'
  only:
    - merge_requests
    - main

format:
  stage: formatting
  image: julia:latest
  script:
    - julia -e '@info "Verifying formatting"'
    - | 
      julia --eval '
      import Pkg
      Pkg.add("JuliaFormatter")
      using JuliaFormatter
      properly_formatted = format("./src"; verbose = true)

      if properly_formatted
        @info "Formatting verified"
      else 
        @info "Formatting failed - some files have not yet been formatted"
      end
      exit(properly_formatted ? 0 : 1)'   
  only:
    - merge_requests
    - main

pages:
  stage: deploy
  image: julia:latest
  script:
    - apt-get update -qq && apt-get install -y git
    - julia --project=docs -e 'using Pkg; Pkg.add("Documenter")'
    - julia --project=docs -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd()))'
    - julia --project=docs -e 'using Pkg; Pkg.status()'
    - julia --project=docs --color=yes docs/make.jl  # make documentation
    - mv docs/build public  # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  only:
    - merge_requests
    - main

# Register version
register:
  # TODO move before_script here
  image: julia:1.9
  extends: .local_registry
  stage: deploy
  script:
    - julia -e 'using Pkg; Pkg.Registry.status()'
    # Set name and email for the bot pushing to the registry.
    - git config --global user.email "<@>"
    - git config --global user.name "Registrator"
    - julia --project="test" -e 'using Pkg; Pkg.instantiate()'  # install dependencies.
    # Register the package. LocalRegistry will not register a new version if it is already registered.
    - julia --project="test" -e 'using LocalRegistry;
        repo = "git@gitlab.sintef.no:" * ENV["CI_PROJECT_PATH"] * ".git";
        register(repo=repo, create_gitlab_mr=true, ignore_reregistration = true)'  # register the package
  rules:
    # Only execute this on the default branch.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
